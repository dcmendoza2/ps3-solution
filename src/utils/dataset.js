const DATASET = [
  [5.90, 224.195],
  [6.0, 237.726],
  [6.1, 257.709],
  [6.2, 280.212],
  [6.3, 295.437],
  [6.4, 300.439],
  [6.5, 303.815],
  [6.6, 313.731],
  [6.7, 324.778],
  [6.8, 324.370],
  [6.9, 311.781],
  [7.0, 300.255],
  [7.1, 295.710],
  [7.2, 285.312]
];

const DATASET_FIRST_DERIVATIVE = {
  5.9: 116.85295762063780358818280204538,
  6.0: 164.88680377594089995480586896725,
  6.1: 227.55086489887520387352019604334,
  6.2: 203.52956626415668636270558756902,
  6.3: 94.987414748279368037373243776017,
  6.4: 21.839918254130184714942504861454,
  6.5: 62.15400714151875354075728187044,
  6.6: 125.91590429633200324305185047796,
  6.7: 69.914584194488954694713328821621,
  6.8: -79.904450987478102467268612659089,
  6.9: -145.18498036662190341469928833638,
  7.0: -72.772357592305218454587725756129,
  7.1: -43.953575275023004062945136923966,
  7.2: -187.21831940860267256432754989554
};
const DATASET_SECOND_DERIVATIVE = {
  5.9: 93.004832139718653233609042984707,
  6.0: 741.53391706396860706493686926898,
  6.1: 314.18135370832960272032828503771,
  6.2: -795.33488539072795519398402957225,
  6.3: -1142.8439043614303065755917038188,
  6.4: -162.07892005759043805370825483839,
  6.5: 795.50784498556593587947908029961,
  6.6: 192.77821766219110282785472228768,
  6.7: -1268.2618290520116126227460238021,
  6.8: -1370.8505912811274098048506255753,
  6.9: 180.44001369156079432134327178725,
  7.0: 903.75187444128819273853502652853,
  7.1: -597.62242143203867501616480730191,
  7.2: -1937.9963382650031626873903145413
};

const DATASET_INTEGRAL = {
  5.9: 47.772778684950445438062160974368,
  6.0: 51.633919009360113250295398756862,
  6.1: 55.790904790021556891588261350989,
  6.2: 58.730952506425488479635532712564,
  6.3: 60.033760393928929488538415171206,
  6.4: 60.999411874595992344438855070621,
  6.5: 62.794270029498122198674536775798,
  6.6: 64.557782644867629073814896401018,
  6.7: 64.44820411266326232180290389806,
  6.8: 62.40132566332258789998377324082,
  6.9: 60.310363685995405091944121522829,
  7.0: 58.945268202104088572923501487821,
  7.1: 56.465619619798729900139733217657,
  7.2: 51.374619307116667243917618179694
};

const FUNC = (x) => {
  return (x*x +(x*x*x*Math.cos(x))-Math.sin(x)+x*Math.sin(x*x)
  );
};

const quadInterpolant = ({ x0, x1, x2, y0, y1, y2 }) => {
  return (x) => {
    return (
      y0 * (((x - x1) * (x - x2)) / ((x0 - x1) * (x0 - x2))) +
      y1 * (((x - x0) * (x - x2)) / ((x1 - x0) * (x1 - x2))) +
      y2 * (((x - x0) * (x - x1)) / ((x2 - x0) * (x2 - x1)))
    );
  };
};

const linearInterpolant = ({ x0, x1, y0, y1 }) => {
  return (x) => {
    return y0 * ((x1 - x) / (x1 - x0)) + y1 * ((x - x0) / (x1 - x0));
  };
};

const summationRect = (start, end, step, sumFunction) => {
  let sum = 0;
  for (
    let i = parseFloat(start);
    i.toFixed(10) < parseFloat(end);
    i = parseFloat((i + step).toFixed(10))
  ) {
    sum += sumFunction(i);
  }
  return sum;
};

const summationTrap = (start, end, step, sumFunction) => {
  let sum = sumFunction(start);
  for (
    let i = start + step;
    i.toFixed(10) < parseFloat(end);
    i = parseFloat((i + step).toFixed(10))
  ) {
    sum += 2 * sumFunction(i);
  }
  sum += sumFunction(end);
  return sum;
};

const findSandwichingPoints = ({ start, end, step, target }) => {
  let sandwiched = 0;
  for (let i = start; i < end; i = parseFloat((i + step).toFixed(4))) {
    if (i >= target) {
      break;
    }
    if (i > sandwiched) {
      sandwiched = i;
    }
  }

  return [
    sandwiched,
    parseFloat((sandwiched + step).toFixed(4)),
    parseFloat((sandwiched + 2 * step).toFixed(4)),
  ];
};
export {
  DATASET,
  DATASET_FIRST_DERIVATIVE,
  DATASET_SECOND_DERIVATIVE,
  DATASET_INTEGRAL,
  FUNC,
  quadInterpolant,
  linearInterpolant,
  summationRect,
  summationTrap,
  findSandwichingPoints,
};
